<template>
  <div class="container">
    <h2 class ="text-center mt -5">My Vue To-do App</h2>
    
    <!-- Input -->
    <div class="flex">
      <input v-model="task" type="text" placeholder="Enter task" class="form-control">
      <button @click= "submitTask" class="btn btn-warning rounded-@">SUBMIT</button>
    </div>

    <!-- Task table-->
    <table class="table table-dark">
  <thead>
    <tr>
      <th scope="col">Task</th>
      <th scope="col">status</th>
      <th scope="col">#</th>
      <th scope="col">#</th>
    </tr>
  </thead>
  <tbody>
    <tr v-for="(task,index) in tasks" :key="index">
      
      <td>
        <span :class="{'finished': task.status ==='finished'}" >{{task.name}}</span></td>
      <td style="width:120px">
      <td><span @click ="changeStatus(index)" class="pointer">
        
        {{firstCharUpper(task.status)}}</span></td>
      <td>
        <div class="text-center" @click ="editTask(index)">
          <span class="fa fa-pen"></span>

        </div>
        </td>
        <td>
          <div class="text-center" @click="deleteTask(index)">
            <span class="fa fa-trash"></span>
          </div>
        </td>
       
      
    </tr>
   
  </tbody>
</table>
    
  </div>
</template>

<script>
export default {
  name: 'Hello World',
  props: {
    msg: String
  },
  data(){
    return{
      task:'',
      editedTask:null,
      availableStatuses:['to-do','in progress','finished'],


      tasks:[
        {
          name:'Steal bananas from the store. ',
          status: 'to-do'
        },
        {
          name:'Eat 1 kg chocolate in 1 hour. ',
          status: 'in-progress'

        }
      ]

    }
  },

  methods:{ 
    submitTask()
    {
      if (this.task.length === 0) return;

      if(this.editTask === null){
      this.tasks.push({
        name: this.task,
        status: 'to-do'
      });
      }else{
        this.tasks[this.editedTask].name = this.task;
        this.editedTask = null;
    }
      this.task = '';
    },
    deleteTask(index){
      this.tasks.splice(index, 1);
    },
    editTask(index){
      this.task = this.tasks[index].name;
      this.editedTask = index;
    },

    changeStatus(index){
      let newIndex = this.availableStatuses.indexOf(this.tasks[index].status);
      if(++newIndex > 2) newIndex = 0;
      this.tasks[index].status = this.availableStatuses[newIndex];

    },

    firstCharUpper(str){
      return str.charAt(0).toUpper() + str.slice(1);
    }
  }
};
</script>

<!-- Add "scoped" attribute to limit CSS to this component only -->
<style scoped>
.pointer{
  cursor: pointer;
}
.finished{
  text-decoration: line-through;


}

</style>
